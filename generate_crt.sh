#! /bin/bash

set -e

while [ $# -gt 0 ]; do
  case $1 in
  --cacert) ca_cert="$2" ;;
  --cakey) ca_key="$2" ;;
  --cadn) ca_dn="$2" ;;
  --admindn) admin_dn="$2" ;;
  --nodedn) node_dn="$2" ;;
  -h | --help)
    echo "Usage: $0 [--cacert <ca_cert>] [--cakey <ca_key>] [--cadn <ca_dn>] [--nodedn <node_dn>] [--admin_dn <admin_dn>]"
    exit 0
    ;;
  esac
  shift
done

# Create directory containing all the certificates that will be generated by this script
certs_dir=opensearch_certs
mkdir -p $certs_dir

# If user doesn't provide any of the options, stop the script.
if [ -z "$ca_cert" ] && [ -z "$ca_key" ] && [ -z "$ca_dn" ] && [ -z "$node_dn" ]; then
  echo "No options provided. Please provide the options to generate the certificates"
  exit 1
# Else generate the certificates based on the options provided by the user
else
  node_cn=$(echo "$node_dn" | sed -n 's/.*\/CN=\([^/]*\).*/\1/p')
  echo "cn is $node_cn"

  CA_CERT_PATH=$ca_cert
  CA_KEY_PATH=$ca_key

  # If the user doesn't provide the CA certificate and key, and CA dn not empty,  use them to generate the node certificate
  if [ -z "$ca_cert" ] && [ -z "$ca_key" ] && [ -n "$ca_dn" ]; then
    # CA certificate
    openssl genrsa -out $certs_dir/ca-key.pem 2048
    openssl req -new -x509 -sha256 -key $certs_dir/ca-key.pem -subj "$ca_dn" -out $certs_dir/ca.pem -days 730
    CA_CERT_PATH=$certs_dir/ca.pem
    CA_KEY_PATH=$certs_dir/ca-key.pem

    # If the user provides the admin dn, use them to generate the admin certificate
      if [ -n "$admin_dn" ]; then
        openssl genrsa -out $certs_dir/admin-key-temp.pem 2048
        openssl pkcs8 -inform PEM -outform PEM -in $certs_dir/admin-key-temp.pem -topk8 -nocrypt -v1 PBE-SHA1-3DES -out $certs_dir/admin-key.pem
        openssl req -new -key $certs_dir/admin-key.pem -subj "$admin_dn" -out $certs_dir/admin.csr
        openssl x509 -req -in $certs_dir/admin.csr -CA "$CA_CERT_PATH" -CAkey "$CA_KEY_PATH" -CAcreateserial -sha256 -out $certs_dir/admin.pem -days 730
      else
        echo "Didn't provide the admin dn so the program will exit"
        exit 1
      fi
  fi


  # If the user provides the node dn, use them to generate the node certificate
  if [ -n "$node_dn" ]; then
    # node certificate
    openssl genrsa -out $certs_dir/"$node_cn"-key-temp.pem 2048
    openssl pkcs8 -inform PEM -outform PEM -in $certs_dir/"$node_cn"-key-temp.pem -topk8 -nocrypt -v1 PBE-SHA1-3DES -out $certs_dir/"$node_cn"-key.pem
    openssl req -new -key $certs_dir/"$node_cn"-key.pem -subj "$node_dn" -out $certs_dir/"$node_cn".csr
    echo "subjectAltName=DNS:$node_cn, DNS:localhost" >$certs_dir/"$node_cn".ext
    openssl x509 -req -in $certs_dir/"$node_cn".csr -CA "$CA_CERT_PATH" -CAkey "$CA_KEY_PATH" -CAcreateserial -sha256 -out $certs_dir/"$node_cn".pem -days 730 -extfile $certs_dir/"$node_cn".ext
  else
    echo "Didn't provide the node dn so the program will exit"
    exit 1
  fi

fi